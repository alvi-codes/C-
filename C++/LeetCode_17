class Solution {
public:

    void recurse(string& digits, string& temp, vector<string>& result, int curr_index){

        if(curr_index == digits.size()){
            result.push_back(temp);     
            return; 
        }

        string in_chars = nums_to_chars(digits[curr_index]);

        for(int i = 0; i < in_chars.size(); i++){
            temp += in_chars[i];

            recurse(digits, temp, result, curr_index + 1);

            temp.pop_back();            
        }
    }

    string nums_to_chars(char digit){

        switch( digit ){
            case '2':
                return "abc";
            case '3':
                return "def";
            case '4':
                return "ghi";
            case '5':
                return "jkl";
            case '6':
                return "mno";
            case '7':
                return "pqrs";
            case '8':
                return "tuv";
            case '9':
                return "wxyz";
            default:
                return "";
        }
    }



    vector<string> letterCombinations(string digits) {
        
        vector<string> result;
        string temp;

        if (digits.size() == 0){
            return result;
        }

        recurse(digits, temp, result, 0);

        return result;        
    }
};
