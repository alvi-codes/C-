/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

//very nice way, but uses hashmap, so extra space needed, see later one as well
// class Solution {
// public:
//     Node* copyRandomList(Node* head) {
//         std::unordered_map<Node*, Node*> node_map;
//         Node* ptr = head;
//         //creating the new unrouted list elements
//         while(ptr != nullptr){
//             Node* temp = new Node(ptr->val);
//             node_map[ptr] = temp;
//             ptr = ptr->next;
//         }
//         ptr = head;
//         //routing the new list elements
//         while(ptr != nullptr){
//             node_map[ptr]->next = node_map[ptr->next];
//             node_map[ptr]->random = node_map[ptr->random];
//             ptr = ptr->next;
//         }
//         return node_map[head];
//     }
// };



//re-watch second half of TUF's YouTube video to understand this
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if (!head) return nullptr;
        
        Node* ptr = head;
        // Step 1: Interleave the original list with copied nodes.
        while (ptr != nullptr) {
            Node* temp = new Node(ptr->val);
            temp->next = ptr->next;
            ptr->next = temp;
            ptr = temp->next;  // Move to the next original node.
        }

        // Step 2: Adjust the random pointers for the copied nodes.
        ptr = head;
        while (ptr != nullptr) {
            if (ptr->random) {
                ptr->next->random = ptr->random->next;  // Point to the copied node.
            }
            ptr = ptr->next->next;  // Move to the next original node.
        }

        // Step 3: Separate the interleaved list into original and copied lists.
        Node* copiedHead = head->next;
        Node* copied = copiedHead;
        ptr = head;
        while (ptr != nullptr) {
            ptr->next = ptr->next->next;
            if (copied->next) copied->next = copied->next->next;
            ptr = ptr->next;
            copied = copied->next;
        }
        return copiedHead;
    }
};
