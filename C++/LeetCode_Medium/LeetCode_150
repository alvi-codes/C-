// Regular Way
// class Solution {
// public:
//     int evalRPN(vector<string>& tokens) {

//         std::stack<int> operand_stack;

//         for (int i = 0; i < tokens.size(); i++){

//             std::string curr_token = tokens[i];

//             if ( curr_token == "+" ){
//                 int op_right = operand_stack.top();
//                 operand_stack.pop();
//                 int op_left = operand_stack.top();
//                 operand_stack.pop();
//                 operand_stack.push(op_left + op_right);
//             }
//             else if ( curr_token == "-" ){
//                 int op_right = operand_stack.top();
//                 operand_stack.pop();
//                 int op_left = operand_stack.top();
//                 operand_stack.pop();
//                 operand_stack.push(op_left - op_right);
//             }
//             else if ( curr_token == "*" ){
//                 int op_right = operand_stack.top();
//                 operand_stack.pop();
//                 int op_left = operand_stack.top();
//                 operand_stack.pop();
//                 operand_stack.push(op_left * op_right);
//             }
//             else if ( curr_token == "/" ){
//                 int op_right = operand_stack.top();
//                 operand_stack.pop();
//                 int op_left = operand_stack.top();
//                 operand_stack.pop();
//                 operand_stack.push(op_left / op_right);
//             }
//             else{
//                 operand_stack.push(std::stoi(curr_token));
//             }
//         }

//         return operand_stack.top();
//     }
// };



// Using Lambda Expressions
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        unordered_map< string, function<int (int, int)> > map = 
        {
            { "+" , [] (int a, int b) { return a + b; } },
            { "-" , [] (int a, int b) { return a - b; } },
            { "*" , [] (int a, int b) { return a * b; } },
            { "/" , [] (int a, int b) { return a / b; } }
        };

        std::stack<int> stack; 

        for (std::string curr_token : tokens) {

            if ( !map.count(curr_token) ) {
                stack.push(stoi(curr_token));
            } else {
                int op1 = stack.top();
                stack.pop();
                int op2 = stack.top();
                stack.pop();
                stack.push( map[curr_token](op2, op1) );
            }
        }
        
        return stack.top();
    }
};






