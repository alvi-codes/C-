class Solution {
private:
    vector<int> topoSort_bfs(int V, vector<vector<int>>& adj) {

        vector<int> indegree(V, 0);
        for(int i = 0; i < V; i++) {
            for(auto it: adj[i]) {
                indegree[it]++;
            }
        }

        queue<int> q;
        for(int i = 0; i < V; i++) {
            if(indegree[i] == 0) {
                q.push(i);
            }
        }

        vector<int> topo_result;
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            topo_result.push_back(node); 
            // node is in topo_result, so remove it from indegree
            for(auto it: adj[node]) {
                indegree[it]--;
                if (indegree[it] == 0) {  
                    q.push(it);
                }
            }
        }

        return topo_result;
    }

public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
                // creating the directed graph in adj list by walking through the pairs
        vector<vector<int>> adj(numCourses);
        for (auto it : prerequisites) {
            adj[it[1]].push_back(it[0]);
        }

        vector<int> topo_result = topoSort_bfs(numCourses, adj);

        if (topo_result.size() == numCourses) {
            return topo_result;
        } 
        else {
            return {};
        }
    }
    
};
