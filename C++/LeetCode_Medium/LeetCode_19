// class Solution {
// public:
//     ListNode* removeNthFromEnd(ListNode* head, int n) {
//         if(!head) {
//             return nullptr;
//         }
//         ListNode* dummy = new ListNode(0);  // A dummy node
//         dummy->next = head;
//         ListNode* prev_ptr = dummy;         // Start from the dummy node
//         ListNode* tail_ptr = dummy;
//         // Move tail_ptr n+1 steps from the start
//         for(int i = 0; i < n + 1; i++) {
//             tail_ptr = tail_ptr->next;
//         }
//         // Move both prev_ptr and tail_ptr till tail_ptr reaches the end
//         while(tail_ptr) {
//             prev_ptr = prev_ptr->next;
//             tail_ptr = tail_ptr->next;
//         }
//         // Delete the nth node from the end
//         ListNode* nodeToDelete = prev_ptr->next;
//         prev_ptr->next = prev_ptr->next->next;
//         delete nodeToDelete;
//         return dummy->next;  // Since we started from dummy node, return dummy->next
//     }
// };



// More intutive, but regular
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if (head->next == NULL) {
            return NULL;
        }
        
        ListNode* slow = head;
        ListNode* fast = head;
        
        while (n > 0) {
            fast = fast->next;
            n--;
        }
        
        if (fast == NULL) {
            return head->next;
        }
        
        while (fast->next != NULL) {
            slow = slow->next;
            fast = fast->next;
        }
        
        slow->next = slow->next->next;
        return head;
    }
};
