#include <unordered_map>

class Solution {
public:

// //Attempt 1
//     vector<int> twoSum(vector<int>& nums, int target) {
//         int size = nums.size();
//         vector<int> indexes;
//         for (int i = 0; i<size; i++){
//             for (int j = 0; j<size; j++){
//                 if(j!=i && nums[i]+nums[j]==target){                 
//                     indexes.push_back(i);
//                     indexes.push_back(j);
//                     return indexes;
//                 }
//             }
//         }
//         return indexes;
//     }

// //Attempt 2
//         vector<int> twoSum(vector<int>& nums, int target) {
//         int size = nums.size();
//         vector<int> indexes;
//         for (int i = 0; i < size; i++) {
//             for (int j = i + 1; j < size; j++) { 
//                 if (nums[i] + nums[j] == target) {
//                     indexes.push_back(i);
//                     indexes.push_back(j);
//                     return indexes;
//                 }
//             }
//         }
//         return indexes;
//     }

//Attempt 3
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> map;
        vector<int> indexes;
        int size = nums.size();
        for (int i = 0; i<size; i++){
            auto found = map.find(target - nums[i]);
            if(found == map.end()){
                map[nums[i]] = i;
            }
            else{
                indexes.push_back(i);
                indexes.push_back(found->second);
                return indexes;
            }
        }
        return indexes;
    }
};


