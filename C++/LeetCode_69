// class Solution {
// public:
//     int mySqrt(int x) {
//         int max_sqrt = sqrt(INT_MAX);
//         for (int i = 0; i <= x; i++){
//             if (i > max_sqrt){
//                 return i-1;
//             }
//             int sqr =  i * i;
//             if (sqr == x){
//                 return i;
//             }
//             else if (sqr > x){
//                 return i-1;
//             }
//         }
//         return -1;     
//     }
// };


// BINARY SEARCH METHOD
class Solution {
public:
    int mySqrt(int x) {
        long long s=0, e=x, ans, mid;   
            while(s <= e){             
                mid = (s+e)/2;
                if(mid*mid == x) {
                    return mid;
                }    
                else if(mid*mid < x){             
                    s = mid + 1;       
                    ans = mid; //an extra pointer 'ans' is maintained to keep track of only lowest 'mid' value. 
                         
                }
                else {
                    e = mid - 1;      
                }
            }
            return ans;   
    }
};
