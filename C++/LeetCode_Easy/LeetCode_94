// /**
//  * Definition for a binary tree node.
//  * struct TreeNode {
//  *     int val;
//  *     TreeNode *left;
//  *     TreeNode *right;
//  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
//  * };
//  */


// // By RECURSION
// class Solution {
// public:
//     void inorder(TreeNode* root, vector<int>& v){
//         if(root == NULL){
//             return;
//         }
//         inorder(root->left, v);
//         v.push_back(root->val);
//         inorder(root->right, v);
//     }
//     vector<int> inorderTraversal(TreeNode* root) {
//         vector<int> v;
//         inorder(root, v);
//         return v;        
//     }
// };


// // BY ITERATION
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        stack<TreeNode*> helper;
        vector<int> out;
        while(true){
            if(root != NULL){
                helper.push(root);
                root = root->left;
            }
            else{
                if (helper.empty()){
                    break;
                }else{
                    root = helper.top();
                    helper.pop();
                    out.push_back(root->val);
                    root = root->right;
                }
            }

        }
        return out;
    }
};
