// //VERY BAD ONE
// class Solution {
// public:
//     vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
//         std::vector<int> out_vector;
//         std::multiset<int> out, set1, set2;
//         for (int i = 0; i < nums1.size(); i++){
//             set1.insert(nums1[i]);
//         }
//         for (int i = 0; i < nums2.size(); i++){
//             set2.insert(nums2[i]);
//         }
//         std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::inserter(out, out.begin()));
//         for (int x : out){
//             out_vector.push_back(x);
//         }
//         return out_vector;   
//     }
// };


// PROPER ONE TO DO
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        vector<int>res;
        int vec1_size=nums1.size();
        int vec2_size=nums2.size();
        int i=0;
        int j=0;
        while(i<vec1_size && j<vec2_size) {
            if(nums1[i]==nums2[j]) {
                res.push_back(nums1[i]);
                i++;
                j++;
            }
            else if(nums1[i]<nums2[j]){
                i++;
            } 
            else{ // meaning nums1[i] > nums2[j]
                j++;
            } 
        }
        return res;
    }
};
