/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */



 // Iterative Approach
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        ListNode* ref_ptr = nullptr;
        ListNode* head = nullptr;

        if (list1 == NULL){
            return list2;
        }
        else if (list2 == NULL){
            return list1;
        }
        else{

            if(list1->val <= list2->val){
                head = list1;
                list1 = list1->next;
            }
            else{
                head = list2;
                list2 = list2->next;
            }

            ref_ptr = head;

            while (list1 != NULL && list2 != NULL){
                if(list1->val > list2->val){
                    ref_ptr->next = list2; 
                    list2 = list2->next;
                }
                else{
                    ref_ptr->next = list1;
                    list1 = list1->next;
                }
                ref_ptr = ref_ptr->next;
            }

            if(list1 == NULL){
                ref_ptr->next = list2;
            }
            else{
                ref_ptr->next = list1;
            }

            return head;
        }
    }
};


// // Recursive Approach
// class Solution {
// public:
// 	ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
//   {
// 		if(l1 == NULL)
//         {
// 			return l2;
// 		}

// 		if(l2 == NULL)
//         {
// 			return l1;
// 		} 
		
// 		if(l1->val <= l2->val)
//         {
// 			l1->next = mergeTwoLists(l1->next, l2);
// 			return l1;
// 		}
// 		else
//         {
// 			l2->next = mergeTwoLists(l1, l2->next);
// 			return l2;            
// 		}
// 	}
// };	
